#include <iostream.h>
#include <conio.h>
#include <graphics.h>
#include <stdlib.h>
#include <dos.h>

class point
{
public:
    int x, y;
};

class poly
{
private:
    int vertices;
    point vertex[100];
    int xmin, xmax, ymin, ymax;
    int isarray[200];
    int count;
    int currentx;

public:
    void readvertices();
    void drawpolygon();
    void scanline();
    void intersection(int currenty);
    void fill(int currenty);
};

void poly::intersection(int currenty)
{
    int x1, y1, x2, y2;
    int temp;
    count = 0;
    float m;

    for (int i = 0; i < vertices; i++)
    {
	x1 = vertex[i].x;
	y1 = vertex[i].y;
	x2 = vertex[i + 1].x;
	y2 = vertex[i + 1].y;

	if (y2 < y1)
	{
	    temp = y1;
	    y1 = y2;
	    y2 = temp;
	    temp = x1;
	    x1 = x2;
	    x2 = temp;
	}

	if (currenty >= y1 && currenty <= y2)
	{
	    if ((y1 - y2) == 0)
		currentx = x1;
	    else
	    {
		currentx = ((x2 - x1) * (currenty - y1) / (y2 - y1)) + x1;
	    }

	    if (currentx >= xmin && currentx <= xmax)
		isarray[count++] = currentx;
	}
    }
}

void poly::fill(int currenty)
{
    for (int i = 0; i < vertices; i++)
    {
        line(vertex[i].x, vertex[i].y, vertex[i + 1].x, vertex[i + 1].y);
    }

    // Sort intersections
    for (int k = 0; k < count - 1; k++)
    {
	for (int j = 0; j < count - k - 1; j++)
	{
	    if (isarray[j] > isarray[j + 1])
	    {
		int temp = isarray[j];
		isarray[j] = isarray[j + 1];
		isarray[j + 1] = temp;
	    }
	}
    }

    delay(100);

    for (int l = 0; l < count - 1; l += 2)
    {
	line(isarray[l], currenty, isarray[l + 1], currenty);
    }
}

void poly::scanline()
{
    ymin = ymax = vertex[0].y;
    xmin = xmax = vertex[0].x;

    for (int i = 1; i < vertices; i++)
    {
        if (ymin > vertex[i].y)
            ymin = vertex[i].y;
        if (ymax < vertex[i].y)
            ymax = vertex[i].y;
        if (xmin > vertex[i].x)
            xmin = vertex[i].x;
        if (xmax < vertex[i].x)
            xmax = vertex[i].x;
    }

    int currenty = ymin + 1;

    while (currenty <= ymax)
    {
        intersection(currenty);
        fill(currenty);
        currenty++;
    }
}

void poly::drawpolygon()
{
    for (int i = 0; i < vertices; i++)
    {
        line(vertex[i].x, vertex[i].y, vertex[i + 1].x, vertex[i + 1].y);
    }
}

void poly::readvertices()
{
    cout << "\n Enter the number of vertices of the polygon: ";
    cin >> vertices;

    if (vertices <= 2)
    {
        cout << "A polygon should have at least three vertices.";
        getch();
        return;
    }

    for (int i = 0; i < vertices; i++)
    {
        cout << "Enter the x and y coordinates of vertex " << (i + 1) << ": ";
        cin >> vertex[i].x >> vertex[i].y;
    }

    // Close the polygon by repeating the first vertex
    vertex[vertices].x = vertex[0].x;
    vertex[vertices].y = vertex[0].y;
}

int main()
{
    clrscr();
    poly p;
    p.readvertices();

    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    cleardevice();

    p.drawpolygon();
    p.scanline();

    getch();
    closegraph();

    return 0;
}
